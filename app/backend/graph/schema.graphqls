type User {
  _id: String!
  username: String!
  # @id
  name: String!
  about: String
  email: String!
  avatarImageURL: String!
  posts: [Post!]
  # @hasInverse(field: postedBy)
  following: [User]
  # @hasInverse(field: followers)
  followers: [User]
  # @hasInverse(field: following)
  publicWallet: String!
  privateWallet: String!
}

type Post {
  _id: String!
  postedBy: User!
  imageURL: String!
  description: String
  likes: Int!
  comments: [Comment!]
  # @hasInverse(field: commentOn)
}

type Comment {
  _id: String!
  text: String!
  commentBy: User!
  commentOn: Post!
}

type Chatboard {
  _id: String!
  name: String!
  imageURL: String!
  description: String
  members: [User!]
  messages: [Message!]
  # @hasInverse(field: commentOn)
}

type Message {
  _id: String!
  text: String
  fileURL: String
  messageBy: User!
  messageOn: Chatboard!
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

input FetchUser {
  id: String!
}

input FetchPost {
  id: String!
}

input FetchComment {
  id: String!
}

input FetchChatboard {
  id: String!
}

input FetchMessage {
  id: String!
}

input NewUser {
  username: String!
  # @id
  name: String!
  about: String
  email: String!
  avatarImageURL: String!
  publicWallet: String!
  privateWallet: String!
}

input NewPost {
  postedBy: ID!
  imageURL: String!
  description: String
  likes: Int!
}

input NewComment {
  text: String!
  commentBy: ID!
  commentOn: ID!
}

input NewChatboard {
  _id: String!
  name: String!
  imageURL: String!
  description: String
  # @hasInverse(field: commentOn)
}

input NewMessage {
  _id: String!
  text: String
  fileURL: String
  messageBy: ID!
  messageOn: ID!
}

type Query {
  users: [User!]!
  posts: [Post!]!
  comments: [Comment!]!
  user(input: FetchUser): User!
  post(input: FetchPost): Post!
  comment(input: FetchComment!): Comment!
}

type Mutation {
  createUser(input: NewUser!): User!
  createPost(input: NewPost!): Post!
  createComment(input: NewComment!): Comment!
}

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"bottlehub/configs"
	"bottlehub/graph/model"
	"context"
)

var (
	db = configs.ConnectDB()
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	comment, err := db.CreateComment(&input)
	return comment, err
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post, err := db.CreatePost(&input)
	return post, err
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := db.CreateUser(&input)
	return user, err
}

// Owners is the resolver for the owners field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	comments, err := db.GetComments()
	return comments, err
}

// Owners is the resolver for the owners field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := db.GetPosts()
	return posts, err
}

// Owners is the resolver for the owners field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := db.GetUsers()
	return users, err
}

// Owner is the resolver for the owner field.
func (r *queryResolver) Comment(ctx context.Context, input model.FetchComment) (*model.Comment, error) {
	comment, err := db.SingleComment(input.ID)
	return comment, err
}

// Owner is the resolver for the owner field.
func (r *queryResolver) Post(ctx context.Context, input *model.FetchPost) (*model.Post, error) {
	post, err := db.SinglePost(input.ID)
	return post, err
}

// Owner is the resolver for the owner field.
func (r *queryResolver) User(ctx context.Context, input *model.FetchUser) (*model.User, error) {
	user, err := db.SingleUser(input.ID)
	return user, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
